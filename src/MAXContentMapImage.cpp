#include "MAXContentMapImage.h"
#include "MAXContentMap.h"



Color default_palette[256] =
{
    { 0, 0, 0, 0}, 
    { 255, 0, 0, 255}, 
    { 0, 255, 0, 255}, 
    { 0, 0, 255, 255}, 
    { 255, 255, 0, 255}, 
    { 255, 171, 0, 255}, 
    { 131, 131, 163, 255}, 
    { 255, 71, 0, 255}, 
    { 255, 255, 147, 255}, 
    { 203, 203, 255, 255}, 
    { 171, 171, 227, 255}, 
    { 99, 91, 223, 255}, 
    { 171, 171, 227, 255}, 
    { 255, 255, 159, 255}, 
    { 243, 171, 103, 255}, 
    { 235, 51, 51, 255}, 
    { 243, 171, 103, 255}, 
    { 23, 99, 135, 255}, 
    { 43, 63, 75, 255}, 
    { 15, 15, 15, 255}, 
    { 43, 63, 75, 255}, 
    { 183, 103, 0, 255}, 
    { 75, 59, 39, 255}, 
    { 15, 15, 15, 255}, 
    { 75, 59, 39, 255}, 
    { 15, 15, 15, 255}, 
    { 27, 27, 27, 255}, 
    { 43, 43, 43, 255}, 
    { 55, 55, 55, 255}, 
    { 71, 67, 67, 255}, 
    { 87, 83, 83, 255}, 
    { 0, 0, 0, 255}, 
    { 131, 187, 27, 255}, 
    { 111, 171, 15, 255}, 
    { 95, 159, 11, 255}, 
    { 79, 147, 7, 255}, 
    { 67, 119, 7, 255}, 
    { 51, 95, 7, 255}, 
    { 39, 67, 7, 255}, 
    { 27, 43, 7, 255}, 
    { 187, 187, 7, 255}, 
    { 179, 135, 7, 255}, 
    { 171, 87, 7, 255}, 
    { 163, 47, 7, 255}, 
    { 255, 255, 255, 255}, 
    { 103, 7, 123, 255}, 
    { 123, 55, 7, 255}, 
    { 147, 187, 15, 255}, 
    { 107, 159, 187, 255}, 
    { 71, 135, 171, 255}, 
    { 47, 115, 151, 255}, 
    { 23, 99, 135, 255}, 
    { 15, 79, 111, 255}, 
    { 11, 59, 87, 255}, 
    { 7, 43, 67, 255}, 
    { 7, 27, 43, 255}, 
    { 187, 123, 87, 255}, 
    { 175, 99, 55, 255}, 
    { 163, 79, 27, 255}, 
    { 151, 59, 7, 255}, 
    { 123, 47, 7, 255}, 
    { 99, 39, 7, 255}, 
    { 71, 27, 7, 255}, 
    { 39, 15, 7, 255}, 
    { 103, 151, 55, 255}, 
    { 91, 151, 51, 255}, 
    { 91, 143, 59, 255}, 
    { 91, 143, 51, 255}, 
    { 87, 143, 43, 255}, 
    { 83, 143, 51, 255}, 
    { 91, 135, 51, 255}, 
    { 91, 135, 43, 255}, 
    { 83, 135, 51, 255}, 
    { 87, 131, 59, 255}, 
    { 83, 135, 43, 255}, 
    { 75, 135, 43, 255}, 
    { 83, 123, 51, 255}, 
    { 83, 123, 43, 255}, 
    { 75, 123, 51, 255}, 
    { 75, 123, 43, 255}, 
    { 75, 119, 35, 255}, 
    { 75, 115, 51, 255}, 
    { 75, 115, 43, 255}, 
    { 67, 115, 43, 255}, 
    { 67, 115, 35, 255}, 
    { 67, 107, 43, 255}, 
    { 67, 107, 35, 255}, 
    { 59, 103, 35, 255}, 
    { 187, 215, 243, 255}, 
    { 183, 207, 231, 255}, 
    { 175, 207, 235, 255}, 
    { 175, 199, 231, 255}, 
    { 175, 199, 223, 255}, 
    { 167, 199, 223, 255}, 
    { 167, 191, 223, 255}, 
    { 167, 191, 215, 255}, 
    { 175, 139, 191, 255}, 
    { 175, 139, 191, 255}, 
    { 175, 143, 195, 255}, 
    { 179, 143, 195, 255}, 
    { 179, 147, 199, 255}, 
    { 183, 151, 203, 255}, 
    { 179, 143, 195, 255}, 
    { 171, 131, 183, 255}, 
    { 171, 135, 187, 255}, 
    { 175, 139, 191, 255}, 
    { 175, 143, 195, 255}, 
    { 179, 147, 199, 255}, 
    { 183, 151, 203, 255}, 
    { 175, 143, 195, 255}, 
    { 163, 127, 163, 255}, 
    { 159, 119, 147, 255}, 
    { 163, 127, 163, 255}, 
    { 171, 131, 179, 255}, 
    { 175, 139, 195, 255}, 
    { 175, 143, 211, 255}, 
    { 171, 131, 179, 255}, 
    { 139, 87, 43, 255}, 
    { 183, 115, 123, 255}, 
    { 179, 147, 199, 255}, 
    { 183, 127, 123, 255}, 
    { 159, 99, 83, 255}, 
    { 139, 87, 43, 255}, 
    { 191, 159, 211, 255}, 
    { 183, 147, 199, 255}, 
    { 175, 139, 191, 255}, 
    { 171, 135, 187, 255}, 
    { 183, 147, 199, 255}, 
    { 231, 199, 139, 255}, 
    { 235, 195, 131, 255}, 
    { 239, 195, 123, 255}, 
    { 243, 191, 115, 255}, 
    { 247, 191, 107, 255}, 
    { 251, 187, 99, 255}, 
    { 255, 183, 91, 255}, 
    { 243, 179, 95, 255}, 
    { 235, 175, 99, 255}, 
    { 223, 171, 103, 255}, 
    { 211, 167, 103, 255}, 
    { 203, 159, 107, 255}, 
    { 191, 155, 107, 255}, 
    { 183, 151, 107, 255}, 
    { 171, 143, 107, 255}, 
    { 163, 139, 107, 255}, 
    { 147, 123, 91, 255}, 
    { 135, 107, 75, 255}, 
    { 123, 95, 63, 255}, 
    { 111, 83, 51, 255}, 
    { 99, 71, 43, 255}, 
    { 79, 75, 71, 255}, 
    { 71, 75, 75, 255}, 
    { 107, 55, 11, 255}, 
    { 55, 63, 75, 255}, 
    { 15, 79, 107, 255}, 
    { 75, 59, 39, 255}, 
    { 79, 43, 11, 255}, 
    { 47, 39, 35, 255}, 
    { 55, 31, 11, 255}, 
    { 39, 23, 7, 255}, 
    { 23, 15, 0, 255}, 
    { 255, 251, 247, 255}, 
    { 243, 223, 211, 255}, 
    { 243, 219, 187, 255}, 
    { 223, 199, 175, 255}, 
    { 223, 195, 155, 255}, 
    { 219, 183, 143, 255}, 
    { 199, 167, 127, 255}, 
    { 183, 163, 131, 255}, 
    { 171, 155, 123, 255}, 
    { 159, 151, 139, 255}, 
    { 175, 167, 147, 255}, 
    { 191, 171, 151, 255}, 
    { 199, 187, 175, 255}, 
    { 207, 163, 107, 255}, 
    { 191, 155, 103, 255}, 
    { 171, 139, 95, 255}, 
    { 163, 139, 107, 255}, 
    { 155, 135, 99, 255}, 
    { 147, 135, 115, 255}, 
    { 131, 127, 119, 255}, 
    { 123, 115, 103, 255}, 
    { 131, 115, 91, 255}, 
    { 139, 123, 99, 255}, 
    { 147, 119, 83, 255}, 
    { 159, 127, 75, 255}, 
    { 171, 131, 75, 255}, 
    { 179, 139, 83, 255}, 
    { 195, 147, 83, 255}, 
    { 199, 139, 67, 255}, 
    { 179, 127, 59, 255}, 
    { 167, 115, 55, 255}, 
    { 147, 111, 59, 255}, 
    { 131, 107, 59, 255}, 
    { 123, 99, 71, 255}, 
    { 115, 99, 59, 255}, 
    { 115, 87, 43, 255}, 
    { 103, 83, 47, 255}, 
    { 91, 79, 59, 255}, 
    { 83, 71, 51, 255}, 
    { 83, 63, 43, 255}, 
    { 75, 59, 39, 255}, 
    { 67, 59, 43, 255}, 
    { 59, 51, 39, 255}, 
    { 51, 43, 31, 255}, 
    { 43, 39, 35, 255}, 
    { 39, 35, 31, 255}, 
    { 31, 27, 23, 255}, 
    { 15, 15, 15, 255}, 
    { 55, 31, 31, 255}, 
    { 47, 43, 43, 255}, 
    { 55, 51, 51, 255}, 
    { 63, 59, 59, 255}, 
    { 75, 71, 71, 255}, 
    { 87, 83, 83, 255}, 
    { 95, 91, 91, 255}, 
    { 103, 99, 99, 255}, 
    { 111, 107, 107, 255}, 
    { 115, 103, 83, 255}, 
    { 107, 95, 75, 255}, 
    { 99, 87, 67, 255}, 
    { 87, 67, 35, 255}, 
    { 75, 43, 43, 255}, 
    { 47, 43, 59, 255}, 
    { 131, 99, 43, 255}, 
    { 131, 107, 75, 255}, 
    { 207, 131, 107, 255}, 
    { 171, 111, 91, 255}, 
    { 187, 83, 55, 255}, 
    { 123, 79, 67, 255}, 
    { 155, 63, 47, 255}, 
    { 115, 39, 35, 255}, 
    { 75, 31, 23, 255}, 
    { 31, 15, 15, 255}, 
    { 139, 171, 99, 255}, 
    { 115, 147, 79, 255}, 
    { 87, 147, 59, 255}, 
    { 95, 115, 67, 255}, 
    { 67, 107, 47, 255}, 
    { 59, 83, 35, 255}, 
    { 43, 67, 27, 255}, 
    { 23, 27, 15, 255}, 
    { 119, 111, 159, 255}, 
    { 99, 87, 131, 255}, 
    { 59, 67, 139, 255}, 
    { 67, 67, 107, 255}, 
    { 47, 51, 107, 255}, 
    { 67, 59, 79, 255}, 
    { 31, 35, 75, 255}, 
    { 15, 19, 43, 255}, 
    { 183, 103, 0, 255}, 
    { 135, 75, 0, 255}, 
    { 91, 51, 0, 255}, 
    { 155, 155, 0, 255}, 
    { 111, 111, 0, 255}, 
    { 67, 67, 0, 255}, 
    { 255, 255, 255, 0}
};

void SetColorsToDefaultPalette(Color* destination, Color* map, int s, int e)
{
    for (int i = s; i <=e; i++)
    {
        destination[i] = map[i];
        destination[i].a = 255;
    }
}

void SetMapColorsToDefaultPalette(Color* destination, Color* map)
{
    SetColorsToDefaultPalette(destination, map, 96,  102); // 7
    SetColorsToDefaultPalette(destination, map, 103, 109); // 7
    SetColorsToDefaultPalette(destination, map, 110, 116); // 7
    SetColorsToDefaultPalette(destination, map, 117, 122); // 6
    SetColorsToDefaultPalette(destination, map, 123, 127); // 5
}



MAXContentMapImage::MAXContentMapImage(const MAXContentMap &map)
:BitmapTexture(GSize2D(map.w * 64, map.h * 64))
{
    Color palette[256];
    memcpy(palette, default_palette, sizeof(palette));
    SetMapColorsToDefaultPalette(palette, map.palette);
    for (int xc = 0; xc < map.w * 64; xc ++) {
        for (int yc = 0; yc < map.h * 64; yc ++) {
     
            int blockX = xc / 64;
            int blockY = yc / 64;
            
            int blockPixelX = xc % 64;
            int blockPixelY = yc % 64;
            
            int tileIndex = static_cast<int>(map.map[blockY * map.w + blockX]);
            int colorIndex = map.mapElements[tileIndex * 64 * 64 + blockPixelY * 64 + blockPixelX];
            Color pixelColor = palette[colorIndex];
            setColor(pixelColor, xc, yc);
        }
    }
}

MAXContentMapImage::MAXContentMapImage(const MAXContentMapImage &map, int newW, int newH)
:BitmapTexture(GSize2D(newW, newH))
{
    float scaleX = (float)newW / map.getSize().width;
    float scaleY = (float)newH / map.getSize().height;
    for (int xc = 0; xc < newW; xc ++) {
        for (int yc = 0; yc < newH; yc ++) {
            float x = xc / scaleX;
            float y = yc / scaleY;
            Color pixelColor = map.getColor(x, y); 
            setColor(pixelColor, xc, yc);
        }
    }
}
